// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package githubscraper

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

// BranchNode includes the requested fields of the GraphQL type Ref.
// The GraphQL type's documentation follows.
//
// Represents a Git reference.
type BranchNode struct {
	// The ref name.
	Name string `json:"name"`
	// Compares the current ref as a base ref to another head ref, if the comparison can be made.
	Compare BranchNodeCompareComparison `json:"compare"`
	// The repository the ref belongs to.
	Repository BranchNodeRepository `json:"repository"`
}

// GetName returns BranchNode.Name, and is useful for accessing the field via an interface.
func (v *BranchNode) GetName() string { return v.Name }

// GetCompare returns BranchNode.Compare, and is useful for accessing the field via an interface.
func (v *BranchNode) GetCompare() BranchNodeCompareComparison { return v.Compare }

// GetRepository returns BranchNode.Repository, and is useful for accessing the field via an interface.
func (v *BranchNode) GetRepository() BranchNodeRepository { return v.Repository }

// BranchNodeCompareComparison includes the requested fields of the GraphQL type Comparison.
// The GraphQL type's documentation follows.
//
// Represents a comparison between two commit revisions.
type BranchNodeCompareComparison struct {
	// The number of commits ahead of the base branch.
	AheadBy int `json:"aheadBy"`
	// The number of commits behind the base branch.
	BehindBy int `json:"behindBy"`
}

// GetAheadBy returns BranchNodeCompareComparison.AheadBy, and is useful for accessing the field via an interface.
func (v *BranchNodeCompareComparison) GetAheadBy() int { return v.AheadBy }

// GetBehindBy returns BranchNodeCompareComparison.BehindBy, and is useful for accessing the field via an interface.
func (v *BranchNodeCompareComparison) GetBehindBy() int { return v.BehindBy }

// BranchNodeRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type BranchNodeRepository struct {
	// The name of the repository.
	Name string `json:"name"`
	// The Ref associated with the repository's default branch.
	DefaultBranchRef BranchNodeRepositoryDefaultBranchRef `json:"defaultBranchRef"`
}

// GetName returns BranchNodeRepository.Name, and is useful for accessing the field via an interface.
func (v *BranchNodeRepository) GetName() string { return v.Name }

// GetDefaultBranchRef returns BranchNodeRepository.DefaultBranchRef, and is useful for accessing the field via an interface.
func (v *BranchNodeRepository) GetDefaultBranchRef() BranchNodeRepositoryDefaultBranchRef {
	return v.DefaultBranchRef
}

// BranchNodeRepositoryDefaultBranchRef includes the requested fields of the GraphQL type Ref.
// The GraphQL type's documentation follows.
//
// Represents a Git reference.
type BranchNodeRepositoryDefaultBranchRef struct {
	// The ref name.
	Name string `json:"name"`
}

// GetName returns BranchNodeRepositoryDefaultBranchRef.Name, and is useful for accessing the field via an interface.
func (v *BranchNodeRepositoryDefaultBranchRef) GetName() string { return v.Name }

// SearchNode includes the requested fields of the GraphQL interface SearchResultItem.
//
// SearchNode is implemented by the following types:
// SearchNodeApp
// SearchNodeDiscussion
// SearchNodeIssue
// SearchNodeMarketplaceListing
// SearchNodeOrganization
// SearchNodePullRequest
// SearchNodeRepository
// SearchNodeUser
// The GraphQL type's documentation follows.
//
// The results of a search.
type SearchNode interface {
	implementsGraphQLInterfaceSearchNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *SearchNodeApp) implementsGraphQLInterfaceSearchNode()                {}
func (v *SearchNodeDiscussion) implementsGraphQLInterfaceSearchNode()         {}
func (v *SearchNodeIssue) implementsGraphQLInterfaceSearchNode()              {}
func (v *SearchNodeMarketplaceListing) implementsGraphQLInterfaceSearchNode() {}
func (v *SearchNodeOrganization) implementsGraphQLInterfaceSearchNode()       {}
func (v *SearchNodePullRequest) implementsGraphQLInterfaceSearchNode()        {}
func (v *SearchNodeRepository) implementsGraphQLInterfaceSearchNode()         {}
func (v *SearchNodeUser) implementsGraphQLInterfaceSearchNode()               {}

func __unmarshalSearchNode(b []byte, v *SearchNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "App":
		*v = new(SearchNodeApp)
		return json.Unmarshal(b, *v)
	case "Discussion":
		*v = new(SearchNodeDiscussion)
		return json.Unmarshal(b, *v)
	case "Issue":
		*v = new(SearchNodeIssue)
		return json.Unmarshal(b, *v)
	case "MarketplaceListing":
		*v = new(SearchNodeMarketplaceListing)
		return json.Unmarshal(b, *v)
	case "Organization":
		*v = new(SearchNodeOrganization)
		return json.Unmarshal(b, *v)
	case "PullRequest":
		*v = new(SearchNodePullRequest)
		return json.Unmarshal(b, *v)
	case "Repository":
		*v = new(SearchNodeRepository)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(SearchNodeUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing SearchResultItem.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for SearchNode: "%v"`, tn.TypeName)
	}
}

func __marshalSearchNode(v *SearchNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *SearchNodeApp:
		typename = "App"

		result := struct {
			TypeName string `json:"__typename"`
			*SearchNodeApp
		}{typename, v}
		return json.Marshal(result)
	case *SearchNodeDiscussion:
		typename = "Discussion"

		result := struct {
			TypeName string `json:"__typename"`
			*SearchNodeDiscussion
		}{typename, v}
		return json.Marshal(result)
	case *SearchNodeIssue:
		typename = "Issue"

		result := struct {
			TypeName string `json:"__typename"`
			*SearchNodeIssue
		}{typename, v}
		return json.Marshal(result)
	case *SearchNodeMarketplaceListing:
		typename = "MarketplaceListing"

		result := struct {
			TypeName string `json:"__typename"`
			*SearchNodeMarketplaceListing
		}{typename, v}
		return json.Marshal(result)
	case *SearchNodeOrganization:
		typename = "Organization"

		result := struct {
			TypeName string `json:"__typename"`
			*SearchNodeOrganization
		}{typename, v}
		return json.Marshal(result)
	case *SearchNodePullRequest:
		typename = "PullRequest"

		result := struct {
			TypeName string `json:"__typename"`
			*SearchNodePullRequest
		}{typename, v}
		return json.Marshal(result)
	case *SearchNodeRepository:
		typename = "Repository"

		result := struct {
			TypeName string `json:"__typename"`
			*SearchNodeRepository
		}{typename, v}
		return json.Marshal(result)
	case *SearchNodeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*SearchNodeUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for SearchNode: "%T"`, v)
	}
}

// SearchNodeApp includes the requested fields of the GraphQL type App.
// The GraphQL type's documentation follows.
//
// A GitHub App.
type SearchNodeApp struct {
	Typename string `json:"__typename"`
}

// GetTypename returns SearchNodeApp.Typename, and is useful for accessing the field via an interface.
func (v *SearchNodeApp) GetTypename() string { return v.Typename }

// SearchNodeDefaultBranchRef includes the requested fields of the GraphQL type Ref.
// The GraphQL type's documentation follows.
//
// Represents a Git reference.
type SearchNodeDefaultBranchRef struct {
	// The ref name.
	Name string `json:"name"`
}

// GetName returns SearchNodeDefaultBranchRef.Name, and is useful for accessing the field via an interface.
func (v *SearchNodeDefaultBranchRef) GetName() string { return v.Name }

// SearchNodeDiscussion includes the requested fields of the GraphQL type Discussion.
// The GraphQL type's documentation follows.
//
// A discussion in a repository.
type SearchNodeDiscussion struct {
	Typename string `json:"__typename"`
}

// GetTypename returns SearchNodeDiscussion.Typename, and is useful for accessing the field via an interface.
func (v *SearchNodeDiscussion) GetTypename() string { return v.Typename }

// SearchNodeIssue includes the requested fields of the GraphQL type Issue.
// The GraphQL type's documentation follows.
//
// An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
type SearchNodeIssue struct {
	Typename string `json:"__typename"`
}

// GetTypename returns SearchNodeIssue.Typename, and is useful for accessing the field via an interface.
func (v *SearchNodeIssue) GetTypename() string { return v.Typename }

// SearchNodeMarketplaceListing includes the requested fields of the GraphQL type MarketplaceListing.
// The GraphQL type's documentation follows.
//
// A listing in the GitHub integration marketplace.
type SearchNodeMarketplaceListing struct {
	Typename string `json:"__typename"`
}

// GetTypename returns SearchNodeMarketplaceListing.Typename, and is useful for accessing the field via an interface.
func (v *SearchNodeMarketplaceListing) GetTypename() string { return v.Typename }

// SearchNodeOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type SearchNodeOrganization struct {
	Typename string `json:"__typename"`
}

// GetTypename returns SearchNodeOrganization.Typename, and is useful for accessing the field via an interface.
func (v *SearchNodeOrganization) GetTypename() string { return v.Typename }

// SearchNodePullRequest includes the requested fields of the GraphQL type PullRequest.
// The GraphQL type's documentation follows.
//
// A repository pull request.
type SearchNodePullRequest struct {
	Typename string `json:"__typename"`
}

// GetTypename returns SearchNodePullRequest.Typename, and is useful for accessing the field via an interface.
func (v *SearchNodePullRequest) GetTypename() string { return v.Typename }

// SearchNodeRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type SearchNodeRepository struct {
	Typename string `json:"__typename"`
	Id       string `json:"id"`
	// The name of the repository.
	Name string `json:"name"`
	// The Ref associated with the repository's default branch.
	DefaultBranchRef SearchNodeDefaultBranchRef `json:"defaultBranchRef"`
}

// GetTypename returns SearchNodeRepository.Typename, and is useful for accessing the field via an interface.
func (v *SearchNodeRepository) GetTypename() string { return v.Typename }

// GetId returns SearchNodeRepository.Id, and is useful for accessing the field via an interface.
func (v *SearchNodeRepository) GetId() string { return v.Id }

// GetName returns SearchNodeRepository.Name, and is useful for accessing the field via an interface.
func (v *SearchNodeRepository) GetName() string { return v.Name }

// GetDefaultBranchRef returns SearchNodeRepository.DefaultBranchRef, and is useful for accessing the field via an interface.
func (v *SearchNodeRepository) GetDefaultBranchRef() SearchNodeDefaultBranchRef {
	return v.DefaultBranchRef
}

// SearchNodeUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type SearchNodeUser struct {
	Typename string `json:"__typename"`
}

// GetTypename returns SearchNodeUser.Typename, and is useful for accessing the field via an interface.
func (v *SearchNodeUser) GetTypename() string { return v.Typename }

// __checkLoginInput is used internally by genqlient
type __checkLoginInput struct {
	Login string `json:"login"`
}

// GetLogin returns __checkLoginInput.Login, and is useful for accessing the field via an interface.
func (v *__checkLoginInput) GetLogin() string { return v.Login }

// __getBranchDataInput is used internally by genqlient
type __getBranchDataInput struct {
	Name         string  `json:"name"`
	Owner        string  `json:"owner"`
	BranchFirst  int     `json:"branchFirst"`
	TargetBranch string  `json:"targetBranch"`
	BranchCursor *string `json:"branchCursor"`
}

// GetName returns __getBranchDataInput.Name, and is useful for accessing the field via an interface.
func (v *__getBranchDataInput) GetName() string { return v.Name }

// GetOwner returns __getBranchDataInput.Owner, and is useful for accessing the field via an interface.
func (v *__getBranchDataInput) GetOwner() string { return v.Owner }

// GetBranchFirst returns __getBranchDataInput.BranchFirst, and is useful for accessing the field via an interface.
func (v *__getBranchDataInput) GetBranchFirst() int { return v.BranchFirst }

// GetTargetBranch returns __getBranchDataInput.TargetBranch, and is useful for accessing the field via an interface.
func (v *__getBranchDataInput) GetTargetBranch() string { return v.TargetBranch }

// GetBranchCursor returns __getBranchDataInput.BranchCursor, and is useful for accessing the field via an interface.
func (v *__getBranchDataInput) GetBranchCursor() *string { return v.BranchCursor }

// __getRepoDataBySearchInput is used internally by genqlient
type __getRepoDataBySearchInput struct {
	SearchQuery string  `json:"searchQuery"`
	RepoCursor  *string `json:"repoCursor"`
}

// GetSearchQuery returns __getRepoDataBySearchInput.SearchQuery, and is useful for accessing the field via an interface.
func (v *__getRepoDataBySearchInput) GetSearchQuery() string { return v.SearchQuery }

// GetRepoCursor returns __getRepoDataBySearchInput.RepoCursor, and is useful for accessing the field via an interface.
func (v *__getRepoDataBySearchInput) GetRepoCursor() *string { return v.RepoCursor }

// checkLoginOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type checkLoginOrganization struct {
	// The organization's login name.
	Login string `json:"login"`
}

// GetLogin returns checkLoginOrganization.Login, and is useful for accessing the field via an interface.
func (v *checkLoginOrganization) GetLogin() string { return v.Login }

// checkLoginResponse is returned by checkLogin on success.
type checkLoginResponse struct {
	// Lookup a user by login.
	User checkLoginUser `json:"user"`
	// Lookup a organization by login.
	Organization checkLoginOrganization `json:"organization"`
}

// GetUser returns checkLoginResponse.User, and is useful for accessing the field via an interface.
func (v *checkLoginResponse) GetUser() checkLoginUser { return v.User }

// GetOrganization returns checkLoginResponse.Organization, and is useful for accessing the field via an interface.
func (v *checkLoginResponse) GetOrganization() checkLoginOrganization { return v.Organization }

// checkLoginUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type checkLoginUser struct {
	// The username used to login.
	Login string `json:"login"`
}

// GetLogin returns checkLoginUser.Login, and is useful for accessing the field via an interface.
func (v *checkLoginUser) GetLogin() string { return v.Login }

// getBranchDataRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type getBranchDataRepository struct {
	// Fetch a list of refs from the repository
	Refs getBranchDataRepositoryRefsRefConnection `json:"refs"`
}

// GetRefs returns getBranchDataRepository.Refs, and is useful for accessing the field via an interface.
func (v *getBranchDataRepository) GetRefs() getBranchDataRepositoryRefsRefConnection { return v.Refs }

// getBranchDataRepositoryRefsRefConnection includes the requested fields of the GraphQL type RefConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Ref.
type getBranchDataRepositoryRefsRefConnection struct {
	// Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount"`
	// A list of nodes.
	Nodes []BranchNode `json:"nodes"`
	// Information to aid in pagination.
	PageInfo getBranchDataRepositoryRefsRefConnectionPageInfo `json:"pageInfo"`
}

// GetTotalCount returns getBranchDataRepositoryRefsRefConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *getBranchDataRepositoryRefsRefConnection) GetTotalCount() int { return v.TotalCount }

// GetNodes returns getBranchDataRepositoryRefsRefConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getBranchDataRepositoryRefsRefConnection) GetNodes() []BranchNode { return v.Nodes }

// GetPageInfo returns getBranchDataRepositoryRefsRefConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getBranchDataRepositoryRefsRefConnection) GetPageInfo() getBranchDataRepositoryRefsRefConnectionPageInfo {
	return v.PageInfo
}

// getBranchDataRepositoryRefsRefConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getBranchDataRepositoryRefsRefConnectionPageInfo struct {
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
}

// GetEndCursor returns getBranchDataRepositoryRefsRefConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getBranchDataRepositoryRefsRefConnectionPageInfo) GetEndCursor() string { return v.EndCursor }

// GetHasNextPage returns getBranchDataRepositoryRefsRefConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getBranchDataRepositoryRefsRefConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// getBranchDataResponse is returned by getBranchData on success.
type getBranchDataResponse struct {
	// Lookup a given repository by the owner and repository name.
	Repository getBranchDataRepository `json:"repository"`
}

// GetRepository returns getBranchDataResponse.Repository, and is useful for accessing the field via an interface.
func (v *getBranchDataResponse) GetRepository() getBranchDataRepository { return v.Repository }

// getRepoDataBySearchResponse is returned by getRepoDataBySearch on success.
type getRepoDataBySearchResponse struct {
	// Perform a search across resources, returning a maximum of 1,000 results.
	Search getRepoDataBySearchSearchSearchResultItemConnection `json:"search"`
}

// GetSearch returns getRepoDataBySearchResponse.Search, and is useful for accessing the field via an interface.
func (v *getRepoDataBySearchResponse) GetSearch() getRepoDataBySearchSearchSearchResultItemConnection {
	return v.Search
}

// getRepoDataBySearchSearchSearchResultItemConnection includes the requested fields of the GraphQL type SearchResultItemConnection.
// The GraphQL type's documentation follows.
//
// A list of results that matched against a search query. Regardless of the number of matches, a maximum of 1,000 results will be available across all types, potentially split across many pages.
type getRepoDataBySearchSearchSearchResultItemConnection struct {
	// The total number of repositories that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types.
	RepositoryCount int `json:"repositoryCount"`
	// A list of nodes.
	Nodes []SearchNode `json:"-"`
	// Information to aid in pagination.
	PageInfo getRepoDataBySearchSearchSearchResultItemConnectionPageInfo `json:"pageInfo"`
}

// GetRepositoryCount returns getRepoDataBySearchSearchSearchResultItemConnection.RepositoryCount, and is useful for accessing the field via an interface.
func (v *getRepoDataBySearchSearchSearchResultItemConnection) GetRepositoryCount() int {
	return v.RepositoryCount
}

// GetNodes returns getRepoDataBySearchSearchSearchResultItemConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getRepoDataBySearchSearchSearchResultItemConnection) GetNodes() []SearchNode { return v.Nodes }

// GetPageInfo returns getRepoDataBySearchSearchSearchResultItemConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getRepoDataBySearchSearchSearchResultItemConnection) GetPageInfo() getRepoDataBySearchSearchSearchResultItemConnectionPageInfo {
	return v.PageInfo
}

func (v *getRepoDataBySearchSearchSearchResultItemConnection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getRepoDataBySearchSearchSearchResultItemConnection
		Nodes []json.RawMessage `json:"nodes"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getRepoDataBySearchSearchSearchResultItemConnection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Nodes
		src := firstPass.Nodes
		*dst = make(
			[]SearchNode,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalSearchNode(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal getRepoDataBySearchSearchSearchResultItemConnection.Nodes: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalgetRepoDataBySearchSearchSearchResultItemConnection struct {
	RepositoryCount int `json:"repositoryCount"`

	Nodes []json.RawMessage `json:"nodes"`

	PageInfo getRepoDataBySearchSearchSearchResultItemConnectionPageInfo `json:"pageInfo"`
}

func (v *getRepoDataBySearchSearchSearchResultItemConnection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getRepoDataBySearchSearchSearchResultItemConnection) __premarshalJSON() (*__premarshalgetRepoDataBySearchSearchSearchResultItemConnection, error) {
	var retval __premarshalgetRepoDataBySearchSearchSearchResultItemConnection

	retval.RepositoryCount = v.RepositoryCount
	{

		dst := &retval.Nodes
		src := v.Nodes
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalSearchNode(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal getRepoDataBySearchSearchSearchResultItemConnection.Nodes: %w", err)
			}
		}
	}
	retval.PageInfo = v.PageInfo
	return &retval, nil
}

// getRepoDataBySearchSearchSearchResultItemConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getRepoDataBySearchSearchSearchResultItemConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns getRepoDataBySearchSearchSearchResultItemConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getRepoDataBySearchSearchSearchResultItemConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns getRepoDataBySearchSearchSearchResultItemConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getRepoDataBySearchSearchSearchResultItemConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// The query or mutation executed by checkLogin.
const checkLogin_Operation = `
query checkLogin ($login: String!) {
	user(login: $login) {
		login
	}
	organization(login: $login) {
		login
	}
}
`

func checkLogin(
	ctx context.Context,
	client graphql.Client,
	login string,
) (*checkLoginResponse, error) {
	req := &graphql.Request{
		OpName: "checkLogin",
		Query:  checkLogin_Operation,
		Variables: &__checkLoginInput{
			Login: login,
		},
	}
	var err error

	var data checkLoginResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getBranchData.
const getBranchData_Operation = `
query getBranchData ($name: String!, $owner: String!, $branchFirst: Int!, $targetBranch: String!, $branchCursor: String) {
	repository(name: $name, owner: $owner) {
		refs(refPrefix: "refs/heads/", first: $branchFirst, after: $branchCursor) {
			totalCount
			nodes {
				name
				compare(headRef: $targetBranch) {
					aheadBy
					behindBy
				}
				repository {
					name
					defaultBranchRef {
						name
					}
				}
			}
			pageInfo {
				endCursor
				hasNextPage
			}
		}
	}
}
`

func getBranchData(
	ctx context.Context,
	client graphql.Client,
	name string,
	owner string,
	branchFirst int,
	targetBranch string,
	branchCursor *string,
) (*getBranchDataResponse, error) {
	req := &graphql.Request{
		OpName: "getBranchData",
		Query:  getBranchData_Operation,
		Variables: &__getBranchDataInput{
			Name:         name,
			Owner:        owner,
			BranchFirst:  branchFirst,
			TargetBranch: targetBranch,
			BranchCursor: branchCursor,
		},
	}
	var err error

	var data getBranchDataResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getRepoDataBySearch.
const getRepoDataBySearch_Operation = `
query getRepoDataBySearch ($searchQuery: String!, $repoCursor: String) {
	search(query: $searchQuery, type: REPOSITORY, first: 100, after: $repoCursor) {
		repositoryCount
		nodes {
			__typename
			... on Repository {
				id
				name
				defaultBranchRef {
					name
				}
			}
		}
		pageInfo {
			hasNextPage
			endCursor
		}
	}
}
`

func getRepoDataBySearch(
	ctx context.Context,
	client graphql.Client,
	searchQuery string,
	repoCursor *string,
) (*getRepoDataBySearchResponse, error) {
	req := &graphql.Request{
		OpName: "getRepoDataBySearch",
		Query:  getRepoDataBySearch_Operation,
		Variables: &__getRepoDataBySearchInput{
			SearchQuery: searchQuery,
			RepoCursor:  repoCursor,
		},
	}
	var err error

	var data getRepoDataBySearchResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
